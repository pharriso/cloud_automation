<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tower on Cloud and Automation</title>
    <link>https://cloudautomation.pharriso.co.uk/tags/tower/</link>
    <description>Recent content in tower on Cloud and Automation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 08 Dec 2020 20:29:31 +0000</lastBuildDate><atom:link href="https://cloudautomation.pharriso.co.uk/tags/tower/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Testing Ansible roles with Molecule and VMware</title>
      <link>https://cloudautomation.pharriso.co.uk/post/vmware-molecule/</link>
      <pubDate>Tue, 08 Dec 2020 20:29:31 +0000</pubDate>
      
      <guid>https://cloudautomation.pharriso.co.uk/post/vmware-molecule/</guid>
      <description>Molecule is a tool to aid with the testing and development of Ansible roles. It allows users to spin up test infrastructure to provide a quick and easy means with which to test Ansible roles. Typically the test instances are containers as they are lightweight and typically very fast to create and destroy. There are a number of posts out there that describe the process of using molecule with containers but I didn&amp;rsquo;t find many that describe the process for testing molecule with Virtual Machines.</description>
    </item>
    
    <item>
      <title>Filtering hosts with the Satellite inventory plugin for Ansible</title>
      <link>https://cloudautomation.pharriso.co.uk/post/foreman_filtering/</link>
      <pubDate>Mon, 02 Nov 2020 16:36:26 +0000</pubDate>
      
      <guid>https://cloudautomation.pharriso.co.uk/post/foreman_filtering/</guid>
      <description>Another post on inventory filtering in Ansible - this time for Red Hat Satellite. I&amp;rsquo;ve written about inventories and filtering in a few places so for some background information you can read these posts on constructed inventory plugins, VMware filtering and on ansible.com/blog around the servicenow plugin. Put simply, Ansible inventory plugins allow you to query a &amp;ldquo;Source of Truth&amp;rdquo; so that you can:
 Effectively and efficiently maintain a list of all of your managed nodes for Ansible.</description>
    </item>
    
    <item>
      <title>Ansible VMware Dynamic Inventory - Filter on tags</title>
      <link>https://cloudautomation.pharriso.co.uk/post/vmware_filter_tags/</link>
      <pubDate>Fri, 04 Sep 2020 16:31:06 +0100</pubDate>
      
      <guid>https://cloudautomation.pharriso.co.uk/post/vmware_filter_tags/</guid>
      <description>I&amp;rsquo;ve written about dynamic inventories before and why they are useful both around constructed inventory plugins and on ansible.com/blog around the servicenow plugin - so I won&amp;rsquo;t repeat it all again here. Dynamic inventories are great for allowing Ansible to use other platforms to provide a list of endpoints to manage and also to help to classify those endpoints. If we take the VMware inventory plugin as an example, I might not want to import every VMware VM into Ansible as a managed endpoint.</description>
    </item>
    
    <item>
      <title>Install Ansible Tower from Satellite 6</title>
      <link>https://cloudautomation.pharriso.co.uk/post/install_tower_from_sat6/</link>
      <pubDate>Sun, 26 Jul 2020 19:22:35 +0100</pubDate>
      
      <guid>https://cloudautomation.pharriso.co.uk/post/install_tower_from_sat6/</guid>
      <description>In this post, we will look at how you can use Red Hat Satellite as a content source for installing Ansible Tower. You may be wondering why we even need to write this process up? Well the simple answer is that the Ansible Tower installation doesn’t follow the “usual” pattern. What is the “usual” pattern?
Many of the Red Hat products are made available via Red Hat’s Content Delivery Network (CDN) in the form of RPM repositories.</description>
    </item>
    
    <item>
      <title>Ansible Tower Dynamic Inventories - Manage Enabled Hosts</title>
      <link>https://cloudautomation.pharriso.co.uk/post/tower-enabled-hosts/</link>
      <pubDate>Mon, 10 Feb 2020 17:41:05 +0100</pubDate>
      
      <guid>https://cloudautomation.pharriso.co.uk/post/tower-enabled-hosts/</guid>
      <description>If you have used dynamic inventories in Ansible Tower before, you may have noticed that it adds some logic to determine whether a host should be enabled for job execution or not. For example, when syncing with our Red Hat Virtualisation environment, it has set some of our hosts to disabled.
Why do we get this behaviour? In the case of Red Hat Virtualisation you can probably tell from the screen shot - Tower will disable any VM&amp;rsquo;s which are powered off and we can see the VM&amp;rsquo;s which are disabled show a state of &amp;ldquo;status_down&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Ansible Constructed Inventory Plugin</title>
      <link>https://cloudautomation.pharriso.co.uk/post/ansible-constructed-inventory-plugin/</link>
      <pubDate>Thu, 16 Jan 2020 09:40:51 +0100</pubDate>
      
      <guid>https://cloudautomation.pharriso.co.uk/post/ansible-constructed-inventory-plugin/</guid>
      <description>In this blog post we will look at how we can easily enrich an existing dynamic inventory using the constructed inventory plugin. But, before we do that, let&amp;rsquo;s take a step back.
Ansible is simple automation tool that allows users to achieve common use cases such as configuration management, provisioning and complex multi-tier orchestration. Part of what makes Ansible so simple, is the fact that it is agentless. One doesn&amp;rsquo;t need to deploy agents or any heavyweight control software to get up and running with Ansible automation.</description>
    </item>
    
    <item>
      <title>Call Ansible Tower from ServiceNow</title>
      <link>https://cloudautomation.pharriso.co.uk/post/snow-call-tower/</link>
      <pubDate>Mon, 05 Aug 2019 11:49:05 +0100</pubDate>
      
      <guid>https://cloudautomation.pharriso.co.uk/post/snow-call-tower/</guid>
      <description>In this post we will look at how we can call Ansible Tower from ServiceNow as part of a ServiceNow Catalog Request. For this example, I have a playbook in Ansible Tower that will manage the membership of a node within an F5 loadbalancer pool. The playbook expects the user to input the name of the node that should be managed and the state it should be in - either enabled or forced_offline.</description>
    </item>
    
    <item>
      <title>Scaling Ansible Tower - Job slicing</title>
      <link>https://cloudautomation.pharriso.co.uk/post/tower-job-slice/</link>
      <pubDate>Wed, 17 Apr 2019 19:16:18 +0100</pubDate>
      
      <guid>https://cloudautomation.pharriso.co.uk/post/tower-job-slice/</guid>
      <description>Ansible Tower is a centralised platform for running and controlling your Ansible automation. It provides a number of key features for running Ansible in the enterprise.
 Role-Based Access Control Inventory Management Credential Management Auditing &amp;amp; Logging Clustering &amp;amp; Scale-Out  Job slicing is a new scale-out feature that was introduced in Ansible Tower 3.4 which allows us to run jobs that are distributed across our Ansible Tower cluster. Before we look at job slicing let&amp;rsquo;s quickly look at clustering and job distribution within a cluster.</description>
    </item>
    
  </channel>
</rss>
